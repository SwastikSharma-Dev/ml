{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":36449,"sourceType":"datasetVersion","datasetId":28601}],"dockerImageVersionId":30761,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:19:26.067145Z","iopub.execute_input":"2024-09-01T18:19:26.067592Z","iopub.status.idle":"2024-09-01T18:19:26.086238Z","shell.execute_reply.started":"2024-09-01T18:19:26.067547Z","shell.execute_reply":"2024-09-01T18:19:26.085024Z"},"trusted":true},"execution_count":173,"outputs":[{"name":"stdout","text":"/kaggle/input/microsoft-adventure-works-cycles-customer-data/AWCustomers.csv\n/kaggle/input/microsoft-adventure-works-cycles-customer-data/AWTest-Classification.csv\n/kaggle/input/microsoft-adventure-works-cycles-customer-data/AWSales.csv\n/kaggle/input/microsoft-adventure-works-cycles-customer-data/AWTest-Regression.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"oCustomer = pd.read_csv('/kaggle/input/microsoft-adventure-works-cycles-customer-data/AWCustomers.csv')\noSales = pd.read_csv('/kaggle/input/microsoft-adventure-works-cycles-customer-data/AWSales.csv')","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:19:26.095383Z","iopub.execute_input":"2024-09-01T18:19:26.095841Z","iopub.status.idle":"2024-09-01T18:19:26.234777Z","shell.execute_reply.started":"2024-09-01T18:19:26.095773Z","shell.execute_reply":"2024-09-01T18:19:26.233616Z"},"trusted":true},"execution_count":174,"outputs":[]},{"cell_type":"code","source":"odf = oCustomer.merge(oSales,on='CustomerID')","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:19:26.237275Z","iopub.execute_input":"2024-09-01T18:19:26.237822Z","iopub.status.idle":"2024-09-01T18:19:26.254088Z","shell.execute_reply.started":"2024-09-01T18:19:26.237747Z","shell.execute_reply":"2024-09-01T18:19:26.252749Z"},"trusted":true},"execution_count":175,"outputs":[]},{"cell_type":"code","source":"odf.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:19:26.255645Z","iopub.execute_input":"2024-09-01T18:19:26.256141Z","iopub.status.idle":"2024-09-01T18:19:26.282407Z","shell.execute_reply.started":"2024-09-01T18:19:26.256086Z","shell.execute_reply":"2024-09-01T18:19:26.281111Z"},"trusted":true},"execution_count":176,"outputs":[{"execution_count":176,"output_type":"execute_result","data":{"text/plain":"   CustomerID Title FirstName MiddleName  LastName Suffix  \\\n0       21173   NaN      Chad          C      Yuan    NaN   \n1       13249   NaN      Ryan        NaN     Perry    NaN   \n2       29350   NaN     Julia        NaN  Thompson    NaN   \n3       13503   NaN  Theodore        NaN     Gomez    NaN   \n4       22803   NaN  Marshall          J      Shan    NaN   \n\n             AddressLine1 AddressLine2         City    StateProvinceName  ...  \\\n0      7090 C. Mount Hood          NaN   Wollongong      New South Wales  ...   \n1     3651 Willow Lake Rd          NaN      Shawnee     British Columbia  ...   \n2  1774 Tice Valley Blvd.          NaN  West Covina           California  ...   \n3         2103 Baldwin Dr          NaN    Liverpool              England  ...   \n4         Am Gallberg 234          NaN        Werne  Nordrhein-Westfalen  ...   \n\n  Gender MaritalStatus HomeOwnerFlag NumberCarsOwned NumberChildrenAtHome  \\\n0      M             M             1               3                    0   \n1      M             M             1               2                    1   \n2      F             S             0               3                    0   \n3      M             M             1               2                    1   \n4      M             S             1               1                    0   \n\n  TotalChildren YearlyIncome LastUpdated  BikeBuyer  AvgMonthSpend  \n0             1        81916  2017-03-06          1          50.97  \n1             2        81076  2017-03-06          1          53.11  \n2             0        86387  2017-03-06          1          54.08  \n3             2        61481  2017-03-06          1          56.93  \n4             0        51804  2017-03-06          1          55.41  \n\n[5 rows x 26 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CustomerID</th>\n      <th>Title</th>\n      <th>FirstName</th>\n      <th>MiddleName</th>\n      <th>LastName</th>\n      <th>Suffix</th>\n      <th>AddressLine1</th>\n      <th>AddressLine2</th>\n      <th>City</th>\n      <th>StateProvinceName</th>\n      <th>...</th>\n      <th>Gender</th>\n      <th>MaritalStatus</th>\n      <th>HomeOwnerFlag</th>\n      <th>NumberCarsOwned</th>\n      <th>NumberChildrenAtHome</th>\n      <th>TotalChildren</th>\n      <th>YearlyIncome</th>\n      <th>LastUpdated</th>\n      <th>BikeBuyer</th>\n      <th>AvgMonthSpend</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>21173</td>\n      <td>NaN</td>\n      <td>Chad</td>\n      <td>C</td>\n      <td>Yuan</td>\n      <td>NaN</td>\n      <td>7090 C. Mount Hood</td>\n      <td>NaN</td>\n      <td>Wollongong</td>\n      <td>New South Wales</td>\n      <td>...</td>\n      <td>M</td>\n      <td>M</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>81916</td>\n      <td>2017-03-06</td>\n      <td>1</td>\n      <td>50.97</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>13249</td>\n      <td>NaN</td>\n      <td>Ryan</td>\n      <td>NaN</td>\n      <td>Perry</td>\n      <td>NaN</td>\n      <td>3651 Willow Lake Rd</td>\n      <td>NaN</td>\n      <td>Shawnee</td>\n      <td>British Columbia</td>\n      <td>...</td>\n      <td>M</td>\n      <td>M</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>2</td>\n      <td>81076</td>\n      <td>2017-03-06</td>\n      <td>1</td>\n      <td>53.11</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>29350</td>\n      <td>NaN</td>\n      <td>Julia</td>\n      <td>NaN</td>\n      <td>Thompson</td>\n      <td>NaN</td>\n      <td>1774 Tice Valley Blvd.</td>\n      <td>NaN</td>\n      <td>West Covina</td>\n      <td>California</td>\n      <td>...</td>\n      <td>F</td>\n      <td>S</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>86387</td>\n      <td>2017-03-06</td>\n      <td>1</td>\n      <td>54.08</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>13503</td>\n      <td>NaN</td>\n      <td>Theodore</td>\n      <td>NaN</td>\n      <td>Gomez</td>\n      <td>NaN</td>\n      <td>2103 Baldwin Dr</td>\n      <td>NaN</td>\n      <td>Liverpool</td>\n      <td>England</td>\n      <td>...</td>\n      <td>M</td>\n      <td>M</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>2</td>\n      <td>61481</td>\n      <td>2017-03-06</td>\n      <td>1</td>\n      <td>56.93</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>22803</td>\n      <td>NaN</td>\n      <td>Marshall</td>\n      <td>J</td>\n      <td>Shan</td>\n      <td>NaN</td>\n      <td>Am Gallberg 234</td>\n      <td>NaN</td>\n      <td>Werne</td>\n      <td>Nordrhein-Westfalen</td>\n      <td>...</td>\n      <td>M</td>\n      <td>S</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>51804</td>\n      <td>2017-03-06</td>\n      <td>1</td>\n      <td>55.41</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 26 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"odf.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:19:26.284720Z","iopub.execute_input":"2024-09-01T18:19:26.285760Z","iopub.status.idle":"2024-09-01T18:19:26.318456Z","shell.execute_reply.started":"2024-09-01T18:19:26.285682Z","shell.execute_reply":"2024-09-01T18:19:26.317073Z"},"trusted":true},"execution_count":177,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 18361 entries, 0 to 18360\nData columns (total 26 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   CustomerID            18361 non-null  int64  \n 1   Title                 101 non-null    object \n 2   FirstName             18361 non-null  object \n 3   MiddleName            10572 non-null  object \n 4   LastName              18361 non-null  object \n 5   Suffix                3 non-null      object \n 6   AddressLine1          18361 non-null  object \n 7   AddressLine2          311 non-null    object \n 8   City                  18361 non-null  object \n 9   StateProvinceName     18361 non-null  object \n 10  CountryRegionName     18361 non-null  object \n 11  PostalCode            18361 non-null  object \n 12  PhoneNumber           18361 non-null  object \n 13  BirthDate             18361 non-null  object \n 14  Education             18361 non-null  object \n 15  Occupation            18361 non-null  object \n 16  Gender                18361 non-null  object \n 17  MaritalStatus         18361 non-null  object \n 18  HomeOwnerFlag         18361 non-null  int64  \n 19  NumberCarsOwned       18361 non-null  int64  \n 20  NumberChildrenAtHome  18361 non-null  int64  \n 21  TotalChildren         18361 non-null  int64  \n 22  YearlyIncome          18361 non-null  int64  \n 23  LastUpdated           18361 non-null  object \n 24  BikeBuyer             18361 non-null  int64  \n 25  AvgMonthSpend         18361 non-null  float64\ndtypes: float64(1), int64(7), object(18)\nmemory usage: 3.6+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"ndf = odf.drop(['CustomerID','Title','FirstName','MiddleName','LastName','Suffix','AddressLine1','AddressLine2','City','StateProvinceName','CountryRegionName','PostalCode','PhoneNumber','LastUpdated'],axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:19:26.320013Z","iopub.execute_input":"2024-09-01T18:19:26.320542Z","iopub.status.idle":"2024-09-01T18:19:26.329038Z","shell.execute_reply.started":"2024-09-01T18:19:26.320473Z","shell.execute_reply":"2024-09-01T18:19:26.327665Z"},"trusted":true},"execution_count":178,"outputs":[]},{"cell_type":"code","source":"ndf.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:19:26.330685Z","iopub.execute_input":"2024-09-01T18:19:26.331357Z","iopub.status.idle":"2024-09-01T18:19:26.356912Z","shell.execute_reply.started":"2024-09-01T18:19:26.331295Z","shell.execute_reply":"2024-09-01T18:19:26.355534Z"},"trusted":true},"execution_count":179,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 18361 entries, 0 to 18360\nData columns (total 12 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   BirthDate             18361 non-null  object \n 1   Education             18361 non-null  object \n 2   Occupation            18361 non-null  object \n 3   Gender                18361 non-null  object \n 4   MaritalStatus         18361 non-null  object \n 5   HomeOwnerFlag         18361 non-null  int64  \n 6   NumberCarsOwned       18361 non-null  int64  \n 7   NumberChildrenAtHome  18361 non-null  int64  \n 8   TotalChildren         18361 non-null  int64  \n 9   YearlyIncome          18361 non-null  int64  \n 10  BikeBuyer             18361 non-null  int64  \n 11  AvgMonthSpend         18361 non-null  float64\ndtypes: float64(1), int64(6), object(5)\nmemory usage: 1.7+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"ndf['BirthDate'] = pd.to_datetime(ndf['BirthDate'])\nndf[\"Age\"]=(pd.to_datetime('2024-09-01') - ndf['BirthDate'])\nndf.drop('BirthDate',axis=1,inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:19:26.359999Z","iopub.execute_input":"2024-09-01T18:19:26.360511Z","iopub.status.idle":"2024-09-01T18:19:26.379622Z","shell.execute_reply.started":"2024-09-01T18:19:26.360453Z","shell.execute_reply":"2024-09-01T18:19:26.378254Z"},"trusted":true},"execution_count":180,"outputs":[]},{"cell_type":"code","source":"ndf.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:19:26.381432Z","iopub.execute_input":"2024-09-01T18:19:26.381935Z","iopub.status.idle":"2024-09-01T18:19:26.401712Z","shell.execute_reply.started":"2024-09-01T18:19:26.381877Z","shell.execute_reply":"2024-09-01T18:19:26.400516Z"},"trusted":true},"execution_count":181,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 18361 entries, 0 to 18360\nData columns (total 12 columns):\n #   Column                Non-Null Count  Dtype          \n---  ------                --------------  -----          \n 0   Education             18361 non-null  object         \n 1   Occupation            18361 non-null  object         \n 2   Gender                18361 non-null  object         \n 3   MaritalStatus         18361 non-null  object         \n 4   HomeOwnerFlag         18361 non-null  int64          \n 5   NumberCarsOwned       18361 non-null  int64          \n 6   NumberChildrenAtHome  18361 non-null  int64          \n 7   TotalChildren         18361 non-null  int64          \n 8   YearlyIncome          18361 non-null  int64          \n 9   BikeBuyer             18361 non-null  int64          \n 10  AvgMonthSpend         18361 non-null  float64        \n 11  Age                   18361 non-null  timedelta64[ns]\ndtypes: float64(1), int64(6), object(4), timedelta64[ns](1)\nmemory usage: 1.7+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"print(\"Education -> \",ndf['Education'].isna().sum())\nprint(\"Occupation -> \",ndf['Occupation'].isna().sum())\nprint(\"Gender -> \",ndf['Gender'].isna().sum())\nprint(\"MaritalStatus -> \",ndf['MaritalStatus'].isna().sum())","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:19:26.403404Z","iopub.execute_input":"2024-09-01T18:19:26.403780Z","iopub.status.idle":"2024-09-01T18:19:26.416660Z","shell.execute_reply.started":"2024-09-01T18:19:26.403740Z","shell.execute_reply":"2024-09-01T18:19:26.415560Z"},"trusted":true},"execution_count":182,"outputs":[{"name":"stdout","text":"Education ->  0\nOccupation ->  0\nGender ->  0\nMaritalStatus ->  0\n","output_type":"stream"}]},{"cell_type":"code","source":"print(\"Education -> \",ndf['Education'].nunique())\nprint(\"Occupation -> \",ndf['Occupation'].nunique())\nprint(\"Gender -> \",ndf['Gender'].nunique())\nprint(\"MaritalStatus -> \",ndf['MaritalStatus'].nunique())","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:19:26.418134Z","iopub.execute_input":"2024-09-01T18:19:26.418638Z","iopub.status.idle":"2024-09-01T18:19:26.438577Z","shell.execute_reply.started":"2024-09-01T18:19:26.418589Z","shell.execute_reply":"2024-09-01T18:19:26.437161Z"},"trusted":true},"execution_count":183,"outputs":[{"name":"stdout","text":"Education ->  5\nOccupation ->  5\nGender ->  2\nMaritalStatus ->  2\n","output_type":"stream"}]},{"cell_type":"code","source":"ndf['Education'] = pd.Categorical(ndf['Education']).codes\nndf['Gender'] = pd.Categorical(ndf['Gender']).codes\nndf['Occupation'] = pd.Categorical(ndf['Occupation']).codes\nndf['MaritalStatus'] = pd.Categorical(ndf['MaritalStatus']).codes","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:19:26.442186Z","iopub.execute_input":"2024-09-01T18:19:26.442681Z","iopub.status.idle":"2024-09-01T18:19:26.459327Z","shell.execute_reply.started":"2024-09-01T18:19:26.442637Z","shell.execute_reply":"2024-09-01T18:19:26.458049Z"},"trusted":true},"execution_count":184,"outputs":[]},{"cell_type":"code","source":"ndf.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:19:26.461403Z","iopub.execute_input":"2024-09-01T18:19:26.461920Z","iopub.status.idle":"2024-09-01T18:19:26.476085Z","shell.execute_reply.started":"2024-09-01T18:19:26.461862Z","shell.execute_reply":"2024-09-01T18:19:26.474828Z"},"trusted":true},"execution_count":185,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 18361 entries, 0 to 18360\nData columns (total 12 columns):\n #   Column                Non-Null Count  Dtype          \n---  ------                --------------  -----          \n 0   Education             18361 non-null  int8           \n 1   Occupation            18361 non-null  int8           \n 2   Gender                18361 non-null  int8           \n 3   MaritalStatus         18361 non-null  int8           \n 4   HomeOwnerFlag         18361 non-null  int64          \n 5   NumberCarsOwned       18361 non-null  int64          \n 6   NumberChildrenAtHome  18361 non-null  int64          \n 7   TotalChildren         18361 non-null  int64          \n 8   YearlyIncome          18361 non-null  int64          \n 9   BikeBuyer             18361 non-null  int64          \n 10  AvgMonthSpend         18361 non-null  float64        \n 11  Age                   18361 non-null  timedelta64[ns]\ndtypes: float64(1), int64(6), int8(4), timedelta64[ns](1)\nmemory usage: 1.2 MB\n","output_type":"stream"}]},{"cell_type":"code","source":"print(\"HomeOwnerFlag -> \",ndf['HomeOwnerFlag'].isna().sum())\nprint(\"NumberCarsOwned -> \",ndf['NumberCarsOwned'].isna().sum())\nprint(\"NumberChildrenAtHome -> \",ndf['NumberChildrenAtHome'].isna().sum())\nprint(\"TotalChildren -> \",ndf['TotalChildren'].isna().sum())\nprint(\"YearlyIncome -> \",ndf['YearlyIncome'].isna().sum())\nprint(\"BikeBuyer -> \",ndf['BikeBuyer'].isna().sum())\nprint(\"AvgMonthSpend -> \",ndf['AvgMonthSpend'].isna().sum())\nprint(\"Age -> \",ndf['Age'].isna().sum())","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:19:26.477538Z","iopub.execute_input":"2024-09-01T18:19:26.477956Z","iopub.status.idle":"2024-09-01T18:19:26.489469Z","shell.execute_reply.started":"2024-09-01T18:19:26.477906Z","shell.execute_reply":"2024-09-01T18:19:26.488109Z"},"trusted":true},"execution_count":186,"outputs":[{"name":"stdout","text":"HomeOwnerFlag ->  0\nNumberCarsOwned ->  0\nNumberChildrenAtHome ->  0\nTotalChildren ->  0\nYearlyIncome ->  0\nBikeBuyer ->  0\nAvgMonthSpend ->  0\nAge ->  0\n","output_type":"stream"}]},{"cell_type":"code","source":"ndf['ChildrenAlong'] = ndf['TotalChildren']-ndf['NumberChildrenAtHome']\nndf = ndf.drop(['NumberChildrenAtHome','TotalChildren'],axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:19:26.490976Z","iopub.execute_input":"2024-09-01T18:19:26.491420Z","iopub.status.idle":"2024-09-01T18:19:26.509660Z","shell.execute_reply.started":"2024-09-01T18:19:26.491316Z","shell.execute_reply":"2024-09-01T18:19:26.508158Z"},"trusted":true},"execution_count":187,"outputs":[]},{"cell_type":"code","source":"ndf['Age'] = ndf['Age'].dt.days ","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:19:42.743637Z","iopub.execute_input":"2024-09-01T18:19:42.744962Z","iopub.status.idle":"2024-09-01T18:19:42.751955Z","shell.execute_reply.started":"2024-09-01T18:19:42.744898Z","shell.execute_reply":"2024-09-01T18:19:42.750669Z"},"trusted":true},"execution_count":191,"outputs":[]},{"cell_type":"code","source":"ndf.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:20:09.274897Z","iopub.execute_input":"2024-09-01T18:20:09.275390Z","iopub.status.idle":"2024-09-01T18:20:09.293118Z","shell.execute_reply.started":"2024-09-01T18:20:09.275340Z","shell.execute_reply":"2024-09-01T18:20:09.291570Z"},"trusted":true},"execution_count":193,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 18361 entries, 0 to 18360\nData columns (total 11 columns):\n #   Column           Non-Null Count  Dtype  \n---  ------           --------------  -----  \n 0   Education        18361 non-null  int8   \n 1   Occupation       18361 non-null  int8   \n 2   Gender           18361 non-null  int8   \n 3   MaritalStatus    18361 non-null  int8   \n 4   HomeOwnerFlag    18361 non-null  int64  \n 5   NumberCarsOwned  18361 non-null  int64  \n 6   YearlyIncome     18361 non-null  int64  \n 7   BikeBuyer        18361 non-null  int64  \n 8   AvgMonthSpend    18361 non-null  float64\n 9   Age              18361 non-null  int64  \n 10  ChildrenAlong    18361 non-null  int64  \ndtypes: float64(1), int64(6), int8(4)\nmemory usage: 1.1 MB\n","output_type":"stream"}]},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:23:07.097389Z","iopub.execute_input":"2024-09-01T18:23:07.097892Z","iopub.status.idle":"2024-09-01T18:23:07.103332Z","shell.execute_reply.started":"2024-09-01T18:23:07.097842Z","shell.execute_reply":"2024-09-01T18:23:07.102004Z"},"trusted":true},"execution_count":197,"outputs":[]},{"cell_type":"code","source":"# plt.boxplot([ndf['Age']])\n# No need to handle Outliers for such columns (any mentioned above in this df)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:23:43.081850Z","iopub.execute_input":"2024-09-01T18:23:43.082325Z","iopub.status.idle":"2024-09-01T18:23:43.335789Z","shell.execute_reply.started":"2024-09-01T18:23:43.082276Z","shell.execute_reply":"2024-09-01T18:23:43.334622Z"},"trusted":true},"execution_count":201,"outputs":[{"execution_count":201,"output_type":"execute_result","data":{"text/plain":"{'whiskers': [<matplotlib.lines.Line2D at 0x7ba801054550>,\n  <matplotlib.lines.Line2D at 0x7ba801055000>],\n 'caps': [<matplotlib.lines.Line2D at 0x7ba801057be0>,\n  <matplotlib.lines.Line2D at 0x7ba801054fa0>],\n 'boxes': [<matplotlib.lines.Line2D at 0x7ba801055060>],\n 'medians': [<matplotlib.lines.Line2D at 0x7ba801056e90>],\n 'fliers': [<matplotlib.lines.Line2D at 0x7ba801056ec0>],\n 'means': []}"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# Using Z-Score, because it ensures that features contribute equally to the model.","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\nscalerr = StandardScaler()","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:33:22.876621Z","iopub.execute_input":"2024-09-01T18:33:22.877094Z","iopub.status.idle":"2024-09-01T18:33:22.973875Z","shell.execute_reply.started":"2024-09-01T18:33:22.877048Z","shell.execute_reply":"2024-09-01T18:33:22.972680Z"},"trusted":true},"execution_count":212,"outputs":[]},{"cell_type":"code","source":"# columns to normalize are:\ncol = ['YearlyIncome', 'AvgMonthSpend','Age']","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:32:22.951578Z","iopub.execute_input":"2024-09-01T18:32:22.952060Z","iopub.status.idle":"2024-09-01T18:32:22.958835Z","shell.execute_reply.started":"2024-09-01T18:32:22.952011Z","shell.execute_reply":"2024-09-01T18:32:22.957282Z"},"trusted":true},"execution_count":206,"outputs":[]},{"cell_type":"code","source":"ndf","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:32:46.023850Z","iopub.execute_input":"2024-09-01T18:32:46.024309Z","iopub.status.idle":"2024-09-01T18:32:46.043087Z","shell.execute_reply.started":"2024-09-01T18:32:46.024262Z","shell.execute_reply":"2024-09-01T18:32:46.041880Z"},"trusted":true},"execution_count":208,"outputs":[{"execution_count":208,"output_type":"execute_result","data":{"text/plain":"       Education  Occupation  Gender  MaritalStatus  HomeOwnerFlag  \\\n0              0           0       1              0              1   \n1              3           0       1              0              1   \n2              0           0       0              1              0   \n3              3           4       1              0              1   \n4              3           4       1              1              1   \n...          ...         ...     ...            ...            ...   \n18356          1           4       0              0              0   \n18357          0           4       0              1              0   \n18358          3           4       0              1              0   \n18359          2           0       0              1              0   \n18360          1           3       0              0              1   \n\n       NumberCarsOwned  YearlyIncome  BikeBuyer  AvgMonthSpend    Age  \\\n0                    3         81916          1          50.97  13442   \n1                    2         81076          1          53.11  19035   \n2                    3         86387          1          54.08  14176   \n3                    2         61481          1          56.93  17120   \n4                    1         51804          1          55.41  18106   \n...                ...           ...        ...            ...    ...   \n18356                1         52953          0          48.14  12348   \n18357                2         60992          1          50.23  11646   \n18358                2         51859          1          49.56  14892   \n18359                0         87177          0          51.42  10671   \n18360                2        136856          1          52.27  14039   \n\n       ChildrenAlong  \n0                  1  \n1                  1  \n2                  0  \n3                  1  \n4                  0  \n...              ...  \n18356              2  \n18357              0  \n18358              0  \n18359              0  \n18360              0  \n\n[18361 rows x 11 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Education</th>\n      <th>Occupation</th>\n      <th>Gender</th>\n      <th>MaritalStatus</th>\n      <th>HomeOwnerFlag</th>\n      <th>NumberCarsOwned</th>\n      <th>YearlyIncome</th>\n      <th>BikeBuyer</th>\n      <th>AvgMonthSpend</th>\n      <th>Age</th>\n      <th>ChildrenAlong</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>3</td>\n      <td>81916</td>\n      <td>1</td>\n      <td>50.97</td>\n      <td>13442</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>81076</td>\n      <td>1</td>\n      <td>53.11</td>\n      <td>19035</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>86387</td>\n      <td>1</td>\n      <td>54.08</td>\n      <td>14176</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>61481</td>\n      <td>1</td>\n      <td>56.93</td>\n      <td>17120</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>51804</td>\n      <td>1</td>\n      <td>55.41</td>\n      <td>18106</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>18356</th>\n      <td>1</td>\n      <td>4</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>52953</td>\n      <td>0</td>\n      <td>48.14</td>\n      <td>12348</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>18357</th>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>60992</td>\n      <td>1</td>\n      <td>50.23</td>\n      <td>11646</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>18358</th>\n      <td>3</td>\n      <td>4</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>51859</td>\n      <td>1</td>\n      <td>49.56</td>\n      <td>14892</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>18359</th>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>87177</td>\n      <td>0</td>\n      <td>51.42</td>\n      <td>10671</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>18360</th>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>136856</td>\n      <td>1</td>\n      <td>52.27</td>\n      <td>14039</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>18361 rows Ã— 11 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"ndf[col] = scalerr.fit_transform(ndf[col])","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:33:36.337307Z","iopub.execute_input":"2024-09-01T18:33:36.337752Z","iopub.status.idle":"2024-09-01T18:33:36.351830Z","shell.execute_reply.started":"2024-09-01T18:33:36.337713Z","shell.execute_reply":"2024-09-01T18:33:36.350357Z"},"trusted":true},"execution_count":215,"outputs":[]},{"cell_type":"code","source":"ndf","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:33:44.519649Z","iopub.execute_input":"2024-09-01T18:33:44.520747Z","iopub.status.idle":"2024-09-01T18:33:44.539017Z","shell.execute_reply.started":"2024-09-01T18:33:44.520691Z","shell.execute_reply":"2024-09-01T18:33:44.537632Z"},"trusted":true},"execution_count":217,"outputs":[{"execution_count":217,"output_type":"execute_result","data":{"text/plain":"       Education  Occupation  Gender  MaritalStatus  HomeOwnerFlag  \\\n0              0           0       1              0              1   \n1              3           0       1              0              1   \n2              0           0       0              1              0   \n3              3           4       1              0              1   \n4              3           4       1              1              1   \n...          ...         ...     ...            ...            ...   \n18356          1           4       0              0              0   \n18357          0           4       0              1              0   \n18358          3           4       0              1              0   \n18359          2           0       0              1              0   \n18360          1           3       0              0              1   \n\n       NumberCarsOwned  YearlyIncome  BikeBuyer  AvgMonthSpend       Age  \\\n0                    3      0.298555          1      -0.231774 -0.515315   \n1                    2      0.271180          1       0.390755  0.845590   \n2                    3      0.444261          1       0.672929 -0.336716   \n3                    2     -0.367401          1       1.501999  0.379627   \n4                    1     -0.682765          1       1.059828  0.619543   \n...                ...           ...        ...            ...       ...   \n18356                1     -0.645321          0      -1.055025 -0.781510   \n18357                2     -0.383337          1      -0.447041 -0.952323   \n18358                2     -0.680973          1      -0.641945 -0.162497   \n18359                0      0.470006          0      -0.100868 -1.189562   \n18360                2      2.088996          1       0.146398 -0.370051   \n\n       ChildrenAlong  \n0                  1  \n1                  1  \n2                  0  \n3                  1  \n4                  0  \n...              ...  \n18356              2  \n18357              0  \n18358              0  \n18359              0  \n18360              0  \n\n[18361 rows x 11 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Education</th>\n      <th>Occupation</th>\n      <th>Gender</th>\n      <th>MaritalStatus</th>\n      <th>HomeOwnerFlag</th>\n      <th>NumberCarsOwned</th>\n      <th>YearlyIncome</th>\n      <th>BikeBuyer</th>\n      <th>AvgMonthSpend</th>\n      <th>Age</th>\n      <th>ChildrenAlong</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0.298555</td>\n      <td>1</td>\n      <td>-0.231774</td>\n      <td>-0.515315</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0.271180</td>\n      <td>1</td>\n      <td>0.390755</td>\n      <td>0.845590</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0.444261</td>\n      <td>1</td>\n      <td>0.672929</td>\n      <td>-0.336716</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>-0.367401</td>\n      <td>1</td>\n      <td>1.501999</td>\n      <td>0.379627</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>-0.682765</td>\n      <td>1</td>\n      <td>1.059828</td>\n      <td>0.619543</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>18356</th>\n      <td>1</td>\n      <td>4</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>-0.645321</td>\n      <td>0</td>\n      <td>-1.055025</td>\n      <td>-0.781510</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>18357</th>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>-0.383337</td>\n      <td>1</td>\n      <td>-0.447041</td>\n      <td>-0.952323</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>18358</th>\n      <td>3</td>\n      <td>4</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>-0.680973</td>\n      <td>1</td>\n      <td>-0.641945</td>\n      <td>-0.162497</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>18359</th>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.470006</td>\n      <td>0</td>\n      <td>-0.100868</td>\n      <td>-1.189562</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>18360</th>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2.088996</td>\n      <td>1</td>\n      <td>0.146398</td>\n      <td>-0.370051</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>18361 rows Ã— 11 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"**Data has been Pre-Processed. Now time to Split it into Test and Training Data and Train the Model.**","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, classification_report","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:39:50.627835Z","iopub.execute_input":"2024-09-01T18:39:50.628472Z","iopub.status.idle":"2024-09-01T18:39:50.634466Z","shell.execute_reply.started":"2024-09-01T18:39:50.628421Z","shell.execute_reply":"2024-09-01T18:39:50.632947Z"},"trusted":true},"execution_count":227,"outputs":[]},{"cell_type":"code","source":"tdf = ndf","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:38:56.258792Z","iopub.execute_input":"2024-09-01T18:38:56.259418Z","iopub.status.idle":"2024-09-01T18:38:56.267573Z","shell.execute_reply.started":"2024-09-01T18:38:56.259367Z","shell.execute_reply":"2024-09-01T18:38:56.266222Z"},"trusted":true},"execution_count":220,"outputs":[]},{"cell_type":"code","source":"X = tdf.drop('BikeBuyer', axis=1)\ny = tdf['BikeBuyer']","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:39:38.535408Z","iopub.execute_input":"2024-09-01T18:39:38.535885Z","iopub.status.idle":"2024-09-01T18:39:38.544383Z","shell.execute_reply.started":"2024-09-01T18:39:38.535838Z","shell.execute_reply":"2024-09-01T18:39:38.542979Z"},"trusted":true},"execution_count":222,"outputs":[]},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:39:53.497268Z","iopub.execute_input":"2024-09-01T18:39:53.497756Z","iopub.status.idle":"2024-09-01T18:39:53.509321Z","shell.execute_reply.started":"2024-09-01T18:39:53.497709Z","shell.execute_reply":"2024-09-01T18:39:53.508120Z"},"trusted":true},"execution_count":228,"outputs":[]},{"cell_type":"markdown","source":"**Training with Random Forest**","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:40:57.516770Z","iopub.execute_input":"2024-09-01T18:40:57.517215Z","iopub.status.idle":"2024-09-01T18:40:57.522523Z","shell.execute_reply.started":"2024-09-01T18:40:57.517171Z","shell.execute_reply":"2024-09-01T18:40:57.521160Z"},"trusted":true},"execution_count":230,"outputs":[]},{"cell_type":"code","source":"model = RandomForestClassifier(n_estimators=100, random_state=42)\nmodel.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:41:59.702622Z","iopub.execute_input":"2024-09-01T18:41:59.703665Z","iopub.status.idle":"2024-09-01T18:42:02.255377Z","shell.execute_reply.started":"2024-09-01T18:41:59.703610Z","shell.execute_reply":"2024-09-01T18:42:02.253650Z"},"trusted":true},"execution_count":231,"outputs":[{"execution_count":231,"output_type":"execute_result","data":{"text/plain":"RandomForestClassifier(random_state=42)","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"y_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\nprint(f'Accuracy: {accuracy:.2f}')","metadata":{"execution":{"iopub.status.busy":"2024-09-01T18:42:12.764631Z","iopub.execute_input":"2024-09-01T18:42:12.765099Z","iopub.status.idle":"2024-09-01T18:42:12.863913Z","shell.execute_reply.started":"2024-09-01T18:42:12.765055Z","shell.execute_reply":"2024-09-01T18:42:12.862627Z"},"trusted":true},"execution_count":232,"outputs":[{"name":"stdout","text":"Accuracy: 0.76\n","output_type":"stream"}]}]}